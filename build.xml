<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build" name="genomizer-server">

    <!-- Paths, properties, etc. -->
    <property environment="env"/>
    <property name="ECLIPSE_HOME" value="../../../../../usr/lib/eclipse"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.7"/>
    <property name="source" value="1.7"/>
    <path id="genomizer-server.classpath">
        <pathelement location="bin/"/>
        <fileset dir="external-libs" id="fileset.jars">
            <include name="*.jar"/>
            <exclude name="junit-*.jar"/>
            <exclude name="hamcrest-*.jar"/>
            <exclude name="httpclient-*.jar"/>
            <exclude name="httpcore-*.jar"/>
            <exclude name="httpmime-*.jar"/>
            <exclude name="servlet-api-*.jar"/>
        </fileset>
    </path>
    <!-- Stuff that is needed for compilation/testing,
         but is not required at runtime. -->
    <path id="devel.classpath">
        <fileset dir="external-libs">
            <include name="junit-*.jar"/>
            <include name="hamcrest-*.jar"/>
            <include name="httpclient-*.jar"/>
            <include name="httpcore-*.jar"/>
            <include name="httpmime-*.jar"/>
            <include name="servlet-api-*.jar"/>
        </fileset>
    </path>

    <!-- Targets. -->
    <target name="init">
        <mkdir dir="bin"/>
        <mkdir dir="${junit.output.dir}"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="external-libs">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>

    <target name="compile" depends="init">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin"
               includeantruntime="false" source="${source}" target="${target}" encoding="ISO-8859-1">
            <src path="src"/>
            <src path="test"/>
            <classpath>
                <path refid="genomizer-server.classpath"/>
                <path refid="devel.classpath"/>
            </classpath>
            <compilerarg value="-Xlint:all"/>
        </javac>
    </target>
    <target name="build" depends="compile"/>

    <target name="jar" depends="build">
        <jar destfile="server.jar">
            <fileset dir="bin/" id="fileset.class">
                <include name ="**/*.class" />
                <exclude name="**/test/**/*" />
                <exclude name="smoothing/*" />
            </fileset>
            <zipgroupfileset refid="fileset.jars" />
            <manifest>
                <attribute name="Main-Class" value="ServerMain" />
            </manifest>
        </jar>
        <jar destfile="resources/smoothing.jar">
            <fileset dir="bin/" id="fileset.smoothing.class">
                <include name ="smoothing/SmoothingAndStep.class" />
                <include name ="smoothing/Tuple.class" />
                <include name ="process/ProcessException.class" />
            </fileset>
            <manifest>
                <attribute name="Main-Class"
                           value="smoothing.SmoothingAndStep" />
            </manifest>
        </jar>
    </target>

    <target name="clean">
        <delete dir="bin"/>
        <delete dir="${junit.output.dir}"/>
        <delete file="server.jar"/>
        <delete file="resources/smoothing.jar"/>
    </target>

    <target name="run" depends="jar">
      <java jar="server.jar" fork="true" failonerror="true">
        <arg value="-debug"/>
      </java>
    </target>

    <target name="test" depends="build,jar">
      <junit printsummary="withOutAndErr">
        <formatter type="xml"/>
        <classpath>
          <path refid="genomizer-server.classpath"/>
          <path refid="devel.classpath"/>
        </classpath>
        <batchtest fork="yes" todir="${junit.output.dir}" failureProperty="test.failed">
          <formatter type="plain" usefile="false"/>
          <fileset dir="test">
            <include name="**/*.java"/>
            <exclude name="**/dummies/*.java"/>
          </fileset>
        </batchtest>
      </junit>
      <fail message="Test failure detected, check test results." if="test.failed" />
    </target>

    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>

    <target name="deploy" depends="jar">
      <exec executable="docker" dir="docker/genomizer-postgres" failonerror="true">
        <arg line="build -t genomizer/postgres ." />
      </exec>
      <exec executable="docker" dir="docker/genomizer-server" failonerror="true">
        <arg line="build -t genomizer/server ." />
      </exec>
      <exec executable="docker" dir="docker/genomizer-nginx" failonerror="true">
        <arg line="build -t genomizer/nginx ." />
      </exec>
      <mkdir dir="pgdata" />
      <mkdir dir="data" />
      <exec executable="docker" failonerror="true">
        <arg line="run -d -v ${user.dir}/pgdata:/var/lib/postgresql/data/pgdata
-v ${user.dir}/docker/genomizer-postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
-v ${user.dir}/sql:/sql:ro
--name=genomizer-postgres
genomizer/postgres" />
      </exec>
      <exec executable="docker" failonerror="true">
        <arg line="run -d -v ${user.dir}/server.jar:/server.jar
-v ${user.dir}/resources:/resources
-v ${user.dir}/settings.cfg:/settings.cfg
-v ${user.dir}/data:/data
-p 8080:7000
--name=genomizer-server
--link genomizer-postgres:postgres
genomizer/server" />
      </exec>
<!--       <exec executable="git" failonerror="true"> -->
<!--         <arg line="submodule init"/> -->
<!--       </exec> -->
<!--       <exec executable="git" failonerror="true"> -->
<!--         <arg line="submodule update"/> -->
<!--       </exec> -->
<!--       <exec executable="expect" failonerror="true" dir="docker/genomizer-nginx"> -->
<!--         <arg line="../../deployment/generate_certificates.expect"/> -->
<!--       </exec> -->
<!--       <exec executable="docker" failonerror="true"> -->
<!--         <arg line="run -d -p 8090:80 -p 4453:443 -->
<!-- -v ${user.dir}/docker/genomizer-nginx/genomizer-web/app:/usr/share/nginx/html -->
<!-- -v ${user.dir}/docker/genomizer-nginx/cert:/etc/nginx/ssl:ro -->
<!-- -v ${user.dir}/docker/genomizer-nginx/nginx.conf:/etc/nginx/nginx.conf:ro -->
<!-- - -name=genomizer-nginx -->
<!-- - -link genomizer-server:genomizer -->
<!-- genomizer/nginx" /> -->
<!--       </exec> -->
    </target>

</project>
