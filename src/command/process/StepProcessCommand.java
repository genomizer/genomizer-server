package command.process;

import com.google.gson.annotations.Expose;
import command.Command;
import command.ValidateException;
import database.constants.MaxLength;
import database.containers.FileTuple;
import database.subClasses.FileMethods;
import org.apache.commons.io.FileUtils;
import process.Step;
import response.HttpStatusCode;
import response.ProcessResponse;
import response.Response;
import server.Debug;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.Callable;

import static command.Command.initDB;


/**
 * Class is used to handle step processing. The command can include multiple
 * file packages to run one at a time.
 */
public class StepProcessCommand extends ProcessCommand {

    @Expose
    protected ArrayList<StepProcessFile> files;

    /**
     * Validate to make sure all input from clients is in correct format.
     * @throws ValidateException
     */
    @Override
    public void validate() throws ValidateException {
        for (StepProcessFile file : files) {
            Command.validateName(
                    file.getInfile(),
                    MaxLength.FILE_FILENAME,
                    "Infile");
            Command.validateName(
                    file.getOutfile(),
                    MaxLength.FILE_FILENAME,
                    "Outfile");
            if (file.getStepSize() == null) {
                throw new ValidateException(
                        HttpStatusCode.BAD_REQUEST,
                        "Error validating StepProcessCommand. " +
                        "StepSize can not be null.");
            }
            if (file.getStepSize() < 1) {
                throw new ValidateException(
                        HttpStatusCode.BAD_REQUEST,
                        "Error validating StepProcessCommand. " +
                        "Step size must be a positive integer");
            }
        }
    }

    @Override
    protected Collection<Callable<Response>> getCallables(
            String rawFilesDir,
            String profileFilesDir) {
        Collection<Callable<Response>> callables = new ArrayList<>();
        for (StepProcessFile file : files) {
            callables.add(file.getCallable(expID, profileFilesDir));
        }
        return callables;
    }

    /**
     * Class is used to start a single step processing with correct parameters.
     */
    public static class StepProcessFile {

        @Expose
        protected String infile;

        @Expose
        protected String outfile;

        @Expose
        protected Integer stepSize;

        public String getInfile() {return infile;}

        public String getOutfile() {return outfile;}

        public Integer getStepSize() {return stepSize;}

        @Override
        public String toString() {
            return "RawToProfProcessFile{" +
                   "infile='" + infile + '\'' +
                   ", outfile='" + outfile + '\'' +
                   ", stepSize='" + stepSize + '\'' +
                   '}';
        }

        public void processFile(
                final String expId,
                final String profileFilesDir)
                throws IOException, InterruptedException,
                       ValidateException, SQLException {

            String inPath =
                    new File(profileFilesDir + "/" + infile).getAbsolutePath();
            String outPath =
                    new File(profileFilesDir + "/" + outfile).getAbsolutePath();
            Step.runStep(inPath, outPath, stepSize);

            // Add generated file to the database.
            FileTuple outTuple = null;
            try {
                FileMethods fileMethods = initDB().getFileMethods();
                FileTuple inTuple = fileMethods.getFileTuple(inPath);

                long fileSize = FileUtils.sizeOf(new File(outPath));

                outTuple = fileMethods.addNewFileWithStatus(
                        /* expId = */ expId,
                        /* fileType = */ FileTuple.PROFILE,
                        /* fileName = */ outfile,
                        /* inputFilename = */ infile,
                        /* metaData = */ "step size: " + stepSize,
                        /* author = */ "Generated by Genomizer",
                        /* uploader = */ "Generated by Genomizer",
                        /* isPrivate = */ false,
                        /* genomeVersion =*/ inTuple.grVersion,
                        /* md5 = */ "",
                        /* status */ "Done");
                Debug.log("Add<ing to DB: " + outTuple);
                fileMethods.updateFileSize(outTuple.id, fileSize);
            } catch (Exception e) {
                e.printStackTrace();
                Debug.log("Unable to add " + getOutfile() + " to DB");
                Debug.log("Removing out file");
                new File(profileFilesDir + "/" + getOutfile()).delete();
                if (outTuple != null) {
                    initDB().deleteFile(outTuple.id);
                }
                throw e;
            }
        }

        public Callable<Response> getCallable(
                final String expId,
                final String profileFilesDir) {
            return new Callable<Response>() {
                @Override
                public Response call() throws Exception {
                    try {
                        processFile(expId, profileFilesDir);
                        return new ProcessResponse(HttpStatusCode.OK);
                    } catch (Exception e) {
                        e.printStackTrace();
                        Debug.log(
                                "Unable to perform stepping: " +
                                e.getMessage());
                        return new ProcessResponse(
                                HttpStatusCode.INTERNAL_SERVER_ERROR,
                                e.getMessage());
                    }
                }
            };
        }
    }

    public ArrayList<StepProcessFile> getFiles() {return files;}

    @Override
    public String toString() {
        return "StepProcessingCommand{" +
               "files=" + files +
               '}';
    }
}
