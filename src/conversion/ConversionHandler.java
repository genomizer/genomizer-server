package conversion;

import database.DatabaseAccessor;
import database.containers.FileTuple;
import response.ErrorResponse;
import response.HttpStatusCode;
import server.ServerSettings;

import javax.naming.ConfigurationException;
import java.io.*;
import java.sql.SQLException;

import static org.apache.commons.codec.digest.DigestUtils.md5Hex;

/**
 * Class that acts as a handler for all the conversions that will be done.
 * All conversions should go through this class.
 *
 * Created 2015-05-04.
 * @author Albin RÃ¥stander <c12arr@cs.umu.se>
 * @author Martin Larsson <dv13mln@cs.umu.se>
 *
 */
public class ConversionHandler {
	private DatabaseAccessor db;
	private ProfileDataConverter pdc;
	private String outputFile;
	private String fileInDB;

	/**
	 * Constructor
	 */
	public ConversionHandler() {
		pdc = new ProfileDataConverter();
		outputFile = null;
	}

	/**
	 * Initiate database
	 * @return DatabaseAccessor
	 * @throws SQLException
	 * @throws IOException
	 */
	private DatabaseAccessor initDB() throws SQLException, IOException {
		return new DatabaseAccessor(ServerSettings.databaseUsername,
				ServerSettings.databasePassword, ServerSettings.databaseHost,
				ServerSettings.databaseName);
	}

	/**
	 * Convert between profile data formats
	 * @param newFormat Format to convert to
	 * @param id Database id of file to convert from
	 * @throws SQLException
	 * @throws IOException
	 */
	public String convertProfileData(String newFormat, int id) throws SQLException, IOException {
		db = initDB();
		FileTuple file = db.getFileTuple(id);
		fileInDB = file.path;
		String currentFormat = getFileType(file.path);

		switch (currentFormat) {
			case "bed":
				convertFromBedTo(newFormat);
				break;
			case "gff":
				convertFromGffTo(newFormat);
				break;
			case "sgr":
				convertFromSgrTo(newFormat);
				break;
			case "wig":
				convertFromWigTo(newFormat);
				break;
		}

		String fileName = outputFile.substring(outputFile.lastIndexOf('/')+1);


		db.addNewFile(file.expId, FileTuple.PROFILE, fileName,
				null, null, file.author,
				"Generated by server", file.isPrivate, file.grVersion, md5Hex(new FileInputStream(new File(outputFile))));
		db.close();

		return outputFile;
	}

	/**
	 * Get file extension
	 * @param filepath
	 * @return
	 */
	private String getFileType(String filepath) {
		return filepath.substring(filepath.lastIndexOf('.')+1);
	}

	/**
	 * All conversions from bed type
	 * @param format
	 * @throws IOException
	 */
	private void convertFromBedTo(String format) throws IOException {
		switch (format) {
			case "bed":
				throw new IllegalArgumentException("Cannot convert from bed to bed.");
			case "gff":
				throw new IllegalArgumentException("Conversion from bed to gff not implemented.");
			case "sgr":
				outputFile = pdc.bedToSgr(fileInDB);
				break;
			case "wig":
				outputFile = pdc.bedToWig(fileInDB);
				break;
			default:
				throw new IllegalArgumentException("Unkown conversion.");
		}
	}

	/**
	 * All conversions from gff type
	 * @param format
	 * @throws IOException
	 */
	private	void convertFromGffTo(String format) throws IOException {
		switch (format) {
			case "bed":
				throw new IllegalArgumentException("Conversion from gff to bed mot implemented.");
			case "gff":
				throw new IllegalArgumentException("Cannot convert from gff to gff");
			case "sgr":
				outputFile = pdc.gffToSgr(fileInDB);
				break;
			case "wig":
				outputFile = pdc.gffToWig(fileInDB);
				break;
			default:
				throw new IllegalArgumentException("Unknown conversion.");
		}
	}

	/**
	 * All conversion from sgr type
	 * @param format
	 * @throws IOException
	 */
	private void convertFromSgrTo(String format) throws IOException {
		switch (format) {
			case "bed":
				throw new IllegalArgumentException("Cannot convert from sgr to bed.");
			case "gff":
				throw new IllegalArgumentException("Cannot convert from sgr to gff.");
			case "sgr":
				throw new IllegalArgumentException("Cannot convert from sgr to sgr.");
			case "wig":
				outputFile = pdc.sgrToWig(fileInDB);
				break;
			default:
				throw new IllegalArgumentException("Unknown conversion.");
		}
	}

	/**
	 * All conversions from wig type
	 * @param format
	 * @throws IOException
	 */
	private void convertFromWigTo(String format) throws IOException {
		String wigType = checkWigType(fileInDB);
		switch (format) {
			case "bed":
				throw new IllegalArgumentException("Cannot convert from wig to bed.");
			case "gff":
				throw new IllegalArgumentException("Cannot convert from wig to gff.");
			case "sgr":
				convertFromWigToSgr(fileInDB, wigType);
				break;
			case "wig":
				throw new IllegalArgumentException("Cannot convert from wig to wig.");
			default:
				throw new IllegalArgumentException("Unknown conversion.");
		}
	}

	/**
	 * Return type of wig file
	 * @param path
	 * @return
	 * @throws IOException
	 */
	private String checkWigType(String path) throws IOException {
		BufferedReader fr = new BufferedReader(new FileReader(path));

		fr.readLine();
		String line = fr.readLine();
		String[] columns = line.split("\\s+");

		if (columns[0].equals("variableStep"))
			return "variableStep";
		else if (columns[0].equals("fixedStep"))
			return "fixedStep";
		else
			return "bed";
	}

	/**
	 * All conversions from different wig types to sgr
	 * @param fileInDB
	 * @param wigType
	 * @throws IOException
	 */
	private void convertFromWigToSgr(String fileInDB, String wigType) throws IOException {
		switch (wigType) {
			case "variableStep":
				outputFile = pdc.wigToSgr("variableStep", fileInDB);
				break;
			case "fixedStep":
				outputFile = pdc.wigToSgr("fixedStep", fileInDB);
				break;
			case "bed":
				outputFile = pdc.wigToSgr("bed", fileInDB);
				break;
			default:
				throw new IllegalArgumentException("Unknown conversion.");
		}
	}

}
